{"id":"25854412-2f7f-4bbe-8617-5ff42e173098","data":{"nodes":[{"id":"note-fKbY8","type":"noteNode","position":{"x":-1533.1415565287136,"y":-624.2436683231297},"data":{"node":{"description":"This Flow Application needs two additional packages (pydub and ffmpeg). If you do not have them installed yet, please install them using the componentes in the right side.\nFor pydub use pip installation and for ffmpeg you need to choice accordingly to your operational system, prefer using brew for macos and apt for linux debian based systems.","display_name":"Installing Additional Packages","documentation":"","template":{"backgroundColor":"amber"}},"type":"note","id":"note-fKbY8"},"selected":false,"width":324,"height":650,"positionAbsolute":{"x":-1533.1415565287136,"y":-624.2436683231297},"dragging":false,"resizing":false,"style":{"width":324,"height":650}},{"id":"PackageInstallerComponent-WGGPE","type":"genericNode","position":{"x":-1206.4089858770624,"y":-624.8536887236112},"data":{"type":"PackageInstallerComponent","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import subprocess\nfrom langflow.custom import Component\nfrom langflow.inputs import DropdownInput, MessageTextInput, SecretStrInput\nfrom langflow.template import Output\nfrom langflow.schema.message import Message\n\nclass PackageInstallerComponent(Component):\n    display_name = \"Package Installer\"\n    description = \"Installs a specified package using pip, brew, or apt. Supports password input for sudo commands for apt.\"\n    icon = \"package\"\n\n    # Define inputs: method of installation, package name, and password\n    inputs = [\n        DropdownInput(\n            name=\"install_method\",\n            display_name=\"Installation Method\",\n            options=[\"pip\", \"brew\", \"apt\"],\n            info=\"Choose how to install the package.\",\n        ),\n        MessageTextInput(\n            name=\"package_name\",\n            display_name=\"Package Name\",\n            info=\"Specify the name of the package to install.\",\n        ),\n        SecretStrInput(\n            name=\"sudo_password\",\n            display_name=\"Sudo Password\",\n            info=\"Enter your password for sudo (required for apt installations).\",\n        ),\n        MessageTextInput(\n            name=\"pass_value\",\n            display_name=\"Text to Pass\",\n            info=\"Pass a text to the next component in the Pass Output.\"\n        )\n    ]\n\n    outputs = [\n        Output(display_name=\"Install Output\", name=\"install_output\", method=\"install_packages\"),\n        Output(display_name=\"Pass\", name=\"pass\", method=\"build_pass\"),\n    ]\n\n    def install_packages(self) -> Message:\n        install_method = self.install_method\n        package_name = self.package_name\n        sudo_password = self.sudo_password\n        result = \"\"\n\n        if not package_name:\n            raise Exception(\"Error: No package name provided.\")\n\n        try:\n            if install_method == \"pip\":\n                # No password needed for pip installations\n                result = self.run_command([\"pip\", \"install\", package_name])\n\n            elif install_method == \"brew\":\n                # Homebrew should not be run with sudo\n                result = self.run_command([\"brew\", \"install\", package_name])\n\n            elif install_method == \"apt\":\n                # Use sudo password for apt installation\n                result = self.run_command_with_sudo([\"apt\", \"update\"], sudo_password)\n                result += \"\\n\" + self.run_command_with_sudo([\"apt\", \"install\", \"-y\", package_name], sudo_password)\n\n        except Exception as e:\n            self.status = f\"Installation failed: {str(e)}\"\n            raise  # Re-raise the exception for Langflow to capture and handle\n\n        # Store result as status and return it in Data object\n        self.status = result\n        return Message(content=result)  # Updated line\n\n    def run_command(self, command: list) -> str:\n        \"\"\"Run a command without sudo.\"\"\"\n        try:\n            result = subprocess.run(command, check=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            return result.stdout\n        except subprocess.CalledProcessError as e:\n            raise Exception(f\"Command failed: {e.stderr}\")\n\n    def run_command_with_sudo(self, command: list, password: str) -> str:\n        \"\"\"Run a command with sudo, using the provided password for apt installations.\"\"\"\n        try:\n            # Prepend echo and pipe the password to the sudo command for apt\n            sudo_command = ['sudo', '-S'] + command\n            process = subprocess.run(sudo_command, input=password + \"\\n\", text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            if process.returncode != 0:\n                raise Exception(f\"Command failed: {process.stderr}\")\n            return process.stdout\n        except subprocess.CalledProcessError as e:\n            raise Exception(f\"Command failed: {e.stderr}\")\n    \n    def build_pass(self) -> Message:\n        return Message(content=self.pass_value)  # Updated line\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"install_method":{"trace_as_metadata":true,"options":["pip","brew","apt"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"install_method","value":"pip","display_name":"Installation Method","advanced":false,"dynamic":false,"info":"Choose how to install the package.","title_case":false,"type":"str","_input_type":"DropdownInput","load_from_db":false},"package_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"package_name","value":"pydub","display_name":"Package Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Specify the name of the package to install.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"pass_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"pass_value","value":"","display_name":"Text to Pass","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Pass a text to the next component in the Pass Output.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"sudo_password":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"sudo_password","value":"","display_name":"Sudo Password","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter your password for sudo (required for apt installations).","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"}},"description":"Installs a specified package using pip, brew, or apt. Supports password input for sudo commands for apt.","icon":"package","base_classes":["Message"],"display_name":"Install Dependencies","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"install_output","display_name":"Install Output","method":"install_packages","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"pass","display_name":"Pass","method":"build_pass","value":"__UNDEFINED__","cache":true}],"field_order":["install_method","package_name","sudo_password","pass_value"],"beta":false,"edited":true,"lf_version":"1.0.18"},"id":"PackageInstallerComponent-WGGPE"},"selected":false,"width":384,"height":661,"positionAbsolute":{"x":-1206.4089858770624,"y":-624.8536887236112},"dragging":false},{"id":"PackageInstallerComponent-CfxeJ","type":"genericNode","position":{"x":-766.8336393384793,"y":-607.8465583203456},"data":{"type":"PackageInstallerComponent","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import subprocess\nfrom langflow.custom import Component\nfrom langflow.inputs import DropdownInput, MessageTextInput, SecretStrInput\nfrom langflow.template import Output\nfrom langflow.schema.message import Message\n\nclass PackageInstallerComponent(Component):\n    display_name = \"Package Installer\"\n    description = \"Installs a specified package using pip, brew, or apt. Supports password input for sudo commands for apt.\"\n    icon = \"package\"\n\n    # Define inputs: method of installation, package name, and password\n    inputs = [\n        DropdownInput(\n            name=\"install_method\",\n            display_name=\"Installation Method\",\n            options=[\"pip\", \"brew\", \"apt\"],\n            info=\"Choose how to install the package.\",\n        ),\n        MessageTextInput(\n            name=\"package_name\",\n            display_name=\"Package Name\",\n            info=\"Specify the name of the package to install.\",\n        ),\n        SecretStrInput(\n            name=\"sudo_password\",\n            display_name=\"Sudo Password\",\n            info=\"Enter your password for sudo (required for apt installations).\",\n        ),\n        MessageTextInput(\n            name=\"pass_value\",\n            display_name=\"Text to Pass\",\n            info=\"Pass a text to the next component in the Pass Output.\"\n        )\n    ]\n\n    outputs = [\n        Output(display_name=\"Install Output\", name=\"install_output\", method=\"install_packages\"),\n        Output(display_name=\"Pass\", name=\"pass\", method=\"build_pass\"),\n    ]\n\n    def install_packages(self) -> Message:\n        install_method = self.install_method\n        package_name = self.package_name\n        sudo_password = self.sudo_password\n        result = \"\"\n\n        if not package_name:\n            raise Exception(\"Error: No package name provided.\")\n\n        try:\n            if install_method == \"pip\":\n                # No password needed for pip installations\n                result = self.run_command([\"pip\", \"install\", package_name])\n\n            elif install_method == \"brew\":\n                # Homebrew should not be run with sudo\n                result = self.run_command([\"brew\", \"install\", package_name])\n\n            elif install_method == \"apt\":\n                # Use sudo password for apt installation\n                result = self.run_command_with_sudo([\"apt\", \"update\"], sudo_password)\n                result += \"\\n\" + self.run_command_with_sudo([\"apt\", \"install\", \"-y\", package_name], sudo_password)\n\n        except Exception as e:\n            self.status = f\"Installation failed: {str(e)}\"\n            raise  # Re-raise the exception for Langflow to capture and handle\n\n        # Store result as status and return it in Data object\n        self.status = result\n        return Message(content=result)  # Updated line\n\n    def run_command(self, command: list) -> str:\n        \"\"\"Run a command without sudo.\"\"\"\n        try:\n            result = subprocess.run(command, check=True, text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            return result.stdout\n        except subprocess.CalledProcessError as e:\n            raise Exception(f\"Command failed: {e.stderr}\")\n\n    def run_command_with_sudo(self, command: list, password: str) -> str:\n        \"\"\"Run a command with sudo, using the provided password for apt installations.\"\"\"\n        try:\n            # Prepend echo and pipe the password to the sudo command for apt\n            sudo_command = ['sudo', '-S'] + command\n            process = subprocess.run(sudo_command, input=password + \"\\n\", text=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n            if process.returncode != 0:\n                raise Exception(f\"Command failed: {process.stderr}\")\n            return process.stdout\n        except subprocess.CalledProcessError as e:\n            raise Exception(f\"Command failed: {e.stderr}\")\n    \n    def build_pass(self) -> Message:\n        return Message(content=self.pass_value)  # Updated line\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"install_method":{"trace_as_metadata":true,"options":["pip","brew","apt"],"combobox":false,"required":false,"placeholder":"","show":true,"name":"install_method","value":"brew","display_name":"Installation Method","advanced":false,"dynamic":false,"info":"Choose how to install the package.","title_case":false,"type":"str","_input_type":"DropdownInput","load_from_db":false},"package_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"package_name","value":"ffmpeg","display_name":"Package Name","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Specify the name of the package to install.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"pass_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"pass_value","value":"","display_name":"Text to Pass","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Pass a text to the next component in the Pass Output.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"sudo_password":{"load_from_db":false,"required":false,"placeholder":"","show":true,"name":"sudo_password","value":"","display_name":"Sudo Password","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter your password for sudo (required for apt installations).","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"}},"description":"Installs a specified package using pip, brew, or apt. Supports password input for sudo commands for apt.","icon":"package","base_classes":["Message"],"display_name":"Install Dependencies","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"install_output","display_name":"Install Output","method":"install_packages","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"pass","display_name":"Pass","method":"build_pass","value":"__UNDEFINED__","cache":true}],"field_order":["install_method","package_name","sudo_password","pass_value"],"beta":false,"edited":true,"lf_version":"1.0.18"},"id":"PackageInstallerComponent-CfxeJ"},"selected":false,"width":384,"height":661,"positionAbsolute":{"x":-766.8336393384793,"y":-607.8465583203456},"dragging":false}],"edges":[{"source":"PackageInstallerComponent-WGGPE","sourceHandle":"{œdataTypeœ:œPackageInstallerComponentœ,œidœ:œPackageInstallerComponent-WGGPEœ,œnameœ:œinstall_outputœ,œoutput_typesœ:[œMessageœ]}","target":"PackageInstallerComponent-CfxeJ","targetHandle":"{œfieldNameœ:œpass_valueœ,œidœ:œPackageInstallerComponent-CfxeJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"pass_value","id":"PackageInstallerComponent-CfxeJ","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"PackageInstallerComponent","id":"PackageInstallerComponent-WGGPE","name":"install_output","output_types":["Message"]}},"id":"reactflow__edge-PackageInstallerComponent-WGGPE{œdataTypeœ:œPackageInstallerComponentœ,œidœ:œPackageInstallerComponent-WGGPEœ,œnameœ:œinstall_outputœ,œoutput_typesœ:[œMessageœ]}-PackageInstallerComponent-CfxeJ{œfieldNameœ:œpass_valueœ,œidœ:œPackageInstallerComponent-CfxeJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":"","animated":false}],"viewport":{"x":880.650298809845,"y":447.3797732550672,"zoom":0.47127563902105385}},"description":"Check the additional packages for installation before running the flow all once, you just need to run them in the first time you are going to install your packages.","name":"Doc to Podcast  (Langflow) - Necessary Installs","last_tested_version":"1.0.18","endpoint_name":null,"is_component":false}